name: release
concurrency: release
on:
  push:
    branches:
      - omaster
env:
  BLD_PYTHON_VERSION: '3.10.2'
  BLD_BASE_IMAGE_SUFFIX: '-alpine3.15'
jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      semVer: ${{ steps.gitversion.outputs.semVer }}
      branchName: ${{ steps.gitversion.outputs.BranchName }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: gittools/actions/gitversion/setup@v0.9.11
        with:
          versionSpec: 5.8.1
      - id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.11
        with:
          useConfigFile: true

  test:
    runs-on: ubuntu-latest
    needs:
      - version
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.BLD_PYTHON_VERSION }}
      - uses: pre-commit/action@v2.0.3
        env:
          SKIP: hadolint
      - name: Install tox
        run: pip install tox

      - name: TOX-bps
        working-directory: block_pvc_scanner
        run: tox
      - name: fix code coverage paths - bps
        working-directory: block_pvc_scanner
        run: |
          sed -i 's@'$GITHUB_WORKSPACE'@/github/workspace/@g' coverage-reports/coverage.xml

      - name: TOX-ppm
        working-directory: pod_pvc_mapping
        run: tox
      - name: fix code coverage paths - ppm
        working-directory: pod_pvc_mapping
        run: |
          sed -i 's@'$GITHUB_WORKSPACE'@/github/workspace/@g' coverage-reports/coverage.xml

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        with:
          args: >
            -Dsonar.projectVersion=${{ needs.version.outputs.semVer }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  python-release:
    runs-on: ubuntu-latest
    name: Python release
    needs:
      - version
      - test
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.BLD_PYTHON_VERSION }}
      - name: VERSION file block-pvc-scanner
        run: |
          echo "__version__ = '${{ needs.version.outputs.semVer }}'" > block_pvc_scanner/src/block_pvc_scanner/_version.py
      - name: VERSION file pod-pvc-mapping
        run: |
          echo "__version__ = '${{ needs.version.outputs.semVer }}'" > pod_pvc_mapping/src/pod_pvc_mapping/_version.py
      - name: build deps
        run: |
          python3 -m pip install --upgrade build
      - name: build Python package block-pvc-scanner
        working-directory: block_pvc_scanner
        run: python3 -m build --sdist
      - name: build Python package pod-pvc-mapping
        working-directory: pod_pvc_mapping
        run: python3 -m build --sdist

      - uses: ncipollo/release-action@v1
        with:
          artifacts: "block_pvc_scanner/dist/*.tar.gz,pod_pvc_mapping/dist/*.tar.gz"
          tag: ${{ needs.version.outputs.semVer }}
          commit: ${{ github.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

  docker-release-bps:
    runs-on: ubuntu-latest
    name: Docker block-pvc-scanner
    needs:
      - version
      - test
    steps:
      - uses: actions/checkout@v2
      - uses: hadolint/hadolint-action@v1.6.0
        with:
          dockerfile: ./block_pvc_scanner/Dockerfile
      - name: VERSION file block-pvc-scanner
        run: |
          echo "__version__ = '${{ needs.version.outputs.semVer }}'" > block_pvc_scanner/src/block_pvc_scanner/_version.py

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Docker build block-pvc-scanner
        id: docker_build_block_pvc_scanner
        uses: docker/build-push-action@v2
        with:
          context: ./block_pvc_scanner
          file: ./block_pvc_scanner/Dockerfile
          load: true
          builder: ${{ steps.buildx.outputs.name }}
          build-args: |
            base_image_tag=${{ env.BLD_PYTHON_VERSION }}${{ env.BLD_BASE_IMAGE_SUFFIX }}
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/block-pvc-scanner:${{ needs.version.outputs.semVer }}
            ${{ secrets.DOCKER_HUB_USERNAME }}/block-pvc-scanner:latest
            ghcr.io/${{ github.repository_owner }}/block-pvc-scanner:${{ needs.version.outputs.semVer }}
          cache-from: type=gha, scope=${{ github.workflow }}-bps
          cache-to: type=gha, scope=${{ github.workflow }}-bps
      - name: run structure tests
        uses: plexsystems/container-structure-test-action@v0.1.0
        with:
          image: ghcr.io/${{ github.repository_owner }}/block-pvc-scanner:${{ needs.version.outputs.semVer }}
          config: ${{ github.workspace }}/block_pvc_scanner/.container-structure-test-config.yaml
      - name: Dive
        uses: yuichielectric/dive-action@0.0.4
        with:
          image: ghcr.io/${{ github.repository_owner }}/block-pvc-scanner:${{ needs.version.outputs.semVer }}
          config-file: ${{ github.workspace }}/.dive-ci.yml
      - name: Docker push block-pvc-scanner
        id: docker_push_block_pvc_scanner
        uses: docker/build-push-action@v2
        with:
          context: ./block_pvc_scanner
          file: ./block_pvc_scanner/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          builder: ${{ steps.buildx.outputs.name }}
          build-args: |
            base_image_tag=${{ env.BLD_PYTHON_VERSION }}${{ env.BLD_BASE_IMAGE_SUFFIX }}
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/block-pvc-scanner:${{ needs.version.outputs.semVer }}
            ${{ secrets.DOCKER_HUB_USERNAME }}/block-pvc-scanner:latest
            ghcr.io/${{ github.repository_owner }}/block-pvc-scanner:${{ needs.version.outputs.semVer }}
          cache-from: type=gha, scope=${{ github.workflow }}-bps
          cache-to: type=gha, scope=${{ github.workflow }}-bps

  docker-release-ppm:
    runs-on: ubuntu-latest
    name: Docker pod-pvc-mapping
    needs:
      - version
      - test
    steps:
      - uses: actions/checkout@v2
      - uses: hadolint/hadolint-action@v1.6.0
        with:
          dockerfile: ./pod_pvc_mapping/Dockerfile
      - name: VERSION file pod-pvc-mapping
        run: |
          echo "__version__ = '${{ needs.version.outputs.semVer }}'" > pod_pvc_mapping/src/pod_pvc_mapping/_version.py

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Docker build pod-pvc-mapping
        id: docker_build_pod_pvc_mapping
        uses: docker/build-push-action@v2
        with:
          context: ./pod_pvc_mapping
          file: ./pod_pvc_mapping/Dockerfile
          load: true
          builder: ${{ steps.buildx.outputs.name }}
          build-args: |
            base_image_tag=${{ env.BLD_PYTHON_VERSION }}${{ env.BLD_BASE_IMAGE_SUFFIX }}
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/pod-pvc-mapping:${{ needs.version.outputs.semVer }}
            ${{ secrets.DOCKER_HUB_USERNAME }}/pod-pvc-mapping:latest
            ghcr.io/${{ github.repository_owner }}/pod-pvc-mapping:${{ needs.version.outputs.semVer }}
          cache-from: type=gha, scope=${{ github.workflow }}-ppm
          cache-to: type=gha, scope=${{ github.workflow }}-ppm
      - name: run structure tests
        uses: plexsystems/container-structure-test-action@v0.1.0
        with:
          image: ghcr.io/${{ github.repository_owner }}/pod-pvc-mapping:${{ needs.version.outputs.semVer }}
          config: ${{ github.workspace }}/pod_pvc_mapping/.container-structure-test-config.yaml
      - name: Dive
        uses: yuichielectric/dive-action@0.0.4
        with:
          image: ghcr.io/${{ github.repository_owner }}/pod-pvc-mapping:${{ needs.version.outputs.semVer }}
          config-file: ${{ github.workspace }}/.dive-ci.yml
      - name: Docker push pod-pvc-mapping
        id: docker_push_pod_pvc_mapping
        uses: docker/build-push-action@v2
        with:
          context: ./pod_pvc_mapping
          file: ./pod_pvc_mapping/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          builder: ${{ steps.buildx.outputs.name }}
          build-args: |
            base_image_tag=${{ env.BLD_PYTHON_VERSION }}${{ env.BLD_BASE_IMAGE_SUFFIX }}
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/pod-pvc-mapping:${{ needs.version.outputs.semVer }}
            ${{ secrets.DOCKER_HUB_USERNAME }}/pod-pvc-mapping:latest
            ghcr.io/${{ github.repository_owner }}/pod-pvc-mapping:${{ needs.version.outputs.semVer }}
          cache-from: type=gha, scope=${{ github.workflow }}-ppm
          cache-to: type=gha, scope=${{ github.workflow }}-ppm

  helm-test-release:
    runs-on: ubuntu-latest
    name: Helm release
    needs:
      - version
      - python-release
      - docker-release-bps
      - docker-release-ppm
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Update chart version in the related HelmChart Charts.yaml
        uses: fjogeleit/yaml-update-action@master
        with:
          valueFile: 'charts/pvc-exporter/Chart.yaml'
          propertyPath: 'version'
          value: ${{ needs.version.outputs.semVer }}
          createPR: false
          commitChange: false
          updateFile: true
          message: 'Update chart version to ${{ needs.version.outputs.version }}'
      - name: Update appVersion in the related HelmChart Charts.yaml
        uses: fjogeleit/yaml-update-action@master
        with:
          valueFile: 'charts/pvc-exporter/Chart.yaml'
          propertyPath: 'appVersion'
          value: ${{ needs.version.outputs.semVer }}
          createPR: false
          commitChange: false
          updateFile: true
          message: 'Update appVersion to ${{ needs.version.outputs.version }}'

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.BLD_PYTHON_VERSION }}
      - uses: azure/setup-helm@v1
        with:
          version: v3.8.0

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.2.0

      - name: Run chart-testing (lint)
        run: ct lint --all --debug

      - name: Create kind cluster
        uses: helm/kind-action@v1.2.0
        with:
          config: kind-config.yaml

      - name: install prometheus crd
        run: |
          kubectl apply -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/v0.50.0/example/prometheus-operator-crd/monitoring.coreos.com_podmonitors.yaml
          kubectl apply -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/v0.50.0/example/prometheus-operator-crd/monitoring.coreos.com_servicemonitors.yaml

      - name: Run chart-testing (install)
        run: ct install --all --print-config --since last-master --target-branch omaster

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - uses: helm/chart-releaser-action@v1.2.1
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: push last master
        run: |
          git reset --hard
          git checkout last-master
          git reset --hard omaster
          git push
